{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Classify an image using the selected model\nexport const classifyImage = async (file, model = 'mobilenet_v3') => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('model', model);\n    const response = await axios.post(`${API_BASE_URL}/classify`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Classification error:', error);\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to classify image');\n  }\n};\n\n// Fetch SHAP explanation for the uploaded image\nexport const getSHAPExplanation = async (file, model = 'mobilenet_v3') => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('model', model);\n    const response = await axios.post(`${API_BASE_URL}/shap`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error('SHAP explanation error:', error);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to generate SHAP explanation');\n  }\n};\n\n// Fetch Integrated Gradients explanation for the uploaded image\nexport const getIntegratedGradients = async (file, model = 'mobilenet_v3') => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('model', model);\n    const response = await axios.post(`${API_BASE_URL}/integrated-gradients`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    console.error('Integrated Gradients error:', error);\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to generate Integrated Gradients');\n  }\n};\n\n// Fetch TCAV explanation for the uploaded image\nexport const getTCAVExplanation = async (file, model = 'mobilenet_v3') => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('model', model);\n    const response = await axios.post(`${API_BASE_URL}/tcav`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    console.error('TCAV explanation error:', error);\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to generate TCAV explanation');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","classifyImage","file","model","formData","FormData","append","response","post","headers","data","error","_error$response","_error$response$data","console","Error","getSHAPExplanation","_error$response2","_error$response2$data","getIntegratedGradients","_error$response3","_error$response3$data","getTCAVExplanation","_error$response4","_error$response4$data"],"sources":["C:/eye/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Classify an image using the selected model\r\nexport const classifyImage = async (file, model = 'mobilenet_v3') => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('model', model);\r\n\r\n    const response = await axios.post(`${API_BASE_URL}/classify`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Classification error:', error);\r\n    throw new Error(error.response?.data?.error || 'Failed to classify image');\r\n  }\r\n};\r\n\r\n// Fetch SHAP explanation for the uploaded image\r\nexport const getSHAPExplanation = async (file, model = 'mobilenet_v3') => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('model', model);\r\n\r\n    const response = await axios.post(`${API_BASE_URL}/shap`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('SHAP explanation error:', error);\r\n    throw new Error(error.response?.data?.error || 'Failed to generate SHAP explanation');\r\n  }\r\n};\r\n\r\n// Fetch Integrated Gradients explanation for the uploaded image\r\nexport const getIntegratedGradients = async (file, model = 'mobilenet_v3') => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('model', model);\r\n\r\n    const response = await axios.post(`${API_BASE_URL}/integrated-gradients`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Integrated Gradients error:', error);\r\n    throw new Error(error.response?.data?.error || 'Failed to generate Integrated Gradients');\r\n  }\r\n};\r\n\r\n// Fetch TCAV explanation for the uploaded image\r\nexport const getTCAVExplanation = async (file, model = 'mobilenet_v3') => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('model', model);\r\n\r\n    const response = await axios.post(`${API_BASE_URL}/tcav`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('TCAV explanation error:', error);\r\n    throw new Error(error.response?.data?.error || 'Failed to generate TCAV explanation');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}